---
# tasks file for os_debian

# - name: Get hostname from inventory hostname
#   set_fact:
#     ansible_hostname: "{{ inventory_hostname.split('.')[0] }}"
#   tags:
#     - baseos
#     - hosts

# - name: Get domain name from inventory hostname
#   set_fact:
#     ansible_domain: '{{ inventory_hostname | regex_replace("^[^.]+.", "")  }}'
#   tags:
#     - baseos
#     - hosts

# - name: Set hostname
#   shell: hostname "{{ ansible_hostname }}"
#   tags:
#     - baseos
#     - hostname

# - name: Set hostname file
#   shell: echo "{{ ansible_hostname }}" > /etc/hostname
#   tags:
#     - baseos
#     - hostname

# - name: Update /etc/hosts
#   template:
#     src: "hosts.j2"
#     dest: "/etc/hosts"
#   tags:
#     - baseos
#     - hosts

# - name: Configure Message of the day
#   template:
#     src: "motd"
#     dest: "/etc/motd"
#   tags:
#     - baseos
#     - motd

# - name: Test if python binary or link exists
#   command: "which python3"
#   ignore_errors: yes
#   register: python_installed
#   changed_when: False
#   tags:
#     - baseos
#     - python
  
#- name: Update alternatives for python
#  command: update-alternatives --install /usr/bin/python python {{ discovered_interpreter_python }} 1
#  when: python_installed.rc != 0
#  tags:
#    - baseos
#    - python

- name: Update list of packages
  apt:
    update_cache: yes
  tags:
    - baseos
    - packages
    - update_packages

- name: Install basic packages
  apt:
    name: "{{item}}"
    state: latest
    update_cache: no
  with_items:
    - vim
    - tcpdump
    - ssh
    - sudo
    - nano
    - wget
    - curl
    - net-tools
    - ntp
  tags:
    - baseos
    - baseos_packages
    - baseos_add_packages
    - packages
    - add_packages

# TODO Check if all resource groups are registered

- name: Create system users
  user:
    name: "{{ item.name }}"
    password: "{{ item.password }}"
    comment: "{{ item.full_name }}"
    shell: "{{ item.shell }}"
    state: present
    update_password: "{{ item.update_password | default('on_create') }}"
    when: ansible.builtin.contains({{ users_list.{{ item.name }} }}=baseos)
  with_items: "{{ users_list }}"

- name: Add ssh public keys to users
  authorized_key:
    user: "{{ item.name }}"
    path: "/home/{{ item.name }}/.ssh/authorized_keys"
    state: present
    key: "{{ item.ssh_public_key | join('\n') }}"
    when: ansible.builtin.contains({{ users_list.{{ item.name }} }}=baseos)1
  when: item.ssh_public_key is defined
  with_items: "{{ users_list }}"